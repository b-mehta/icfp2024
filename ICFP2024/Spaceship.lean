import Mathlib.Data.Nat.Digits

-- [(1, 38),
-- (10, 4),
-- (11, 15),
-- (12, 5),
-- (13, 14),
-- (13, 6),
-- (15, 12),
-- (15, 8),
-- (16, 10),
-- (16, 9),
-- (4, 3),
-- (4, 31),
-- (5, 27),
-- (7, 23),
-- (7, 4),
-- (8, 20),
-- (9, 18),
-- (-1, 42),
-- (-4, 48),
-- (-6, 50),
-- (-9, 53),
-- (-11, 207),
-- (-11, 218),
-- (-11, 222),
-- (-11, 225),
-- (-12, 202),
-- (-13, 197),
-- (-15, 193),
-- (-17, 189),
-- (-17, 231),
-- (-17, 55),
-- (-18, 71),
-- (-19, 184),
-- (-19, 57),
-- (-19, 69),
-- (-19, 76),
-- (-20, 234),
-- (-20, 60),
-- (-20, 63),
-- (-20, 66),
-- (-20, 79),
-- (-22, 81),
-- (-23, 236),
-- (-24, 171),
-- (-24, 82),
-- (-25, 163),
-- (-25, 238),
-- (-25, 84),
-- (-26, 240),
-- (-26, 91),
-- (-27, 101),
-- (-28, 106),
-- (-28, 118),
-- (-28, 128),
-- (-28, 242),
-- (-29, 133),
-- (-31, 244),
-- (-35, 246),
-- (-40, 248),
-- (-45, 249),
-- (-51, 251),
-- (-56, 253),
-- (-62, 255),
-- (-67, 258),
-- (-76, 265),
-- (-83, 272),
-- (-92, 287),
-- (-97, 301),
-- (-105, 318),
-- (-110, 326),
-- (-114, 333),
-- (-117, 339),
-- (-119, 344),
-- (-121, 350),
-- (-132, 366),
-- (-141, 369),
-- (-145, 369),
-- (-152, 368),
-- (-155, 368),
-- (-157, 368),
-- (-162, 371),
-- (-165, 374),
-- (-167, 376),
-- (-168, 378),
-- (-168, 380),]

def dir : ℕ → ℤ × ℤ
| 1 => (-1, -1)
| 2 => (0, -1)
| 3 => (1, -1)
| 4 => (-1, 0)
| 5 => (0, 0)
| 6 => (1, 0)
| 7 => (-1, 1)
| 8 => (0, 1)
| 9 => (1, 1)
| _ => (0, 0)

def moves (pos speed : ℤ × ℤ) : List ℕ → List (ℤ × ℤ)
  | [] => []
  | x :: xs =>
      let speed' := (speed.1 + (dir x).1, speed.2 + (dir x).2)
      let pos' := (pos.1 + speed'.1, pos.2 + speed'.2)
      pos' :: moves pos' speed' xs

-- 789
-- 456
-- 123

def positions2 : List (ℤ × ℤ) := [(0, 1), (-1, 2), (-1, 4), (0, 7), (1, 10), (3, 12), (5, 13), (7, 14), (8, 14), (8, 13), (9, 13), (10, 14), (11, 15), (12, 15), (14, 16), (17, 16), (20, 15), (22, 15), (23, 14), (25, 12), (27, 10), (29, 8), (32, 6), (35, 4), (37, 2), (40, -1), (44, -4), (49, -8), (53, -11), (58, -14), (63, -18), (68, -22), (72, -26), (77, -29), (81, -33), (85, -37), (88, -42), (90, -48), (92, -55), (94, -61), (95, -68), (95, -76), (94, -84), (93, -93), (92, -102), (92, -112), (92, -122), (93, -131), (94, -140)]
def positions3 : List (ℤ × ℤ) :=
  [(-1, 1), (1, 8), (4, 15), (3, 14), (3, 13), (-1, 3), (-1, 0), (2, 11), (0, 5), (5, 16)]
def positions3' : List (ℤ × ℤ) := [(-1, 0), (-1, 1), (-1, 3), (0, 5), (1, 8), (2, 11), (3, 13), (3, 14), (4, 15), (5, 16)]

def positions4 : List (Int × Int) :=
  [(0, -1), (0, -3), (-1, -5), (-1, -7), (-2, -10), (-2, -13), (-3, -17), (-3, -21), (-4, -25),
   (-6, -29), (-7, -34), (-7, -38), (-8, -43), (-10, -49), (-13, -54), (-15, -60), (-16, -67),
   (-18, -73), (-21, -78), (-23, -82), (-26, -86), (-30, -89), (-35, -92), (-39, -96), (-42, -99),
   (-45, -102), (-48, -106), (-52, -109), (-56, -112), (-60, -116), (-64, -119), (-68, -122),
   (-71, -124), (-73, -127), (-75, -130), (-76, -134), (-78, -138), (-81, -141), (-85, -143),
   (-90, -144), (-94, -144), (-98, -145), (-102, -145), (-106, -146), (-111, -148), (-115, -151),
   (-120, -155), (-124, -159), (-128, -162), (-133, -165), (-137, -167), (-141, -168), (-144, -168),
   (-146, -168), (-149, -168), (-151, -167), (-154, -166), (-156, -166), (-158, -167), (-160, -168),
   (-163, -170), (-165, -173), (-168, -175), (-172, -177), (-177, -178), (-181, -179), (-185, -179),
   (-188, -178), (-190, -177), (-192, -176), (-193, -176), (-193, -175), (-194, -175), (-194, -174),
   (-195, -174), (-197, -174), (-198, -173), (-199, -171), (-199, -169), (-198, -168), (-197, -168),
   (-195, -168), (-193, -169), (-191, -169), (-188, -169), (-186, -168), (-184, -167), (-181, -167),
   (-179, -168), (-178, -169), (-176, -170), (-175, -172), (-175, -173), (-174, -174), (-173, -174),
   (-173, -173), (-172, -172), (-170, -172), (-167, -172)]

def positions5 : List (ℤ × ℤ) :=
  [(-3, 2),
   (-5, 4),
   (-7, 5),
    (-8, 6),
    (-9, 6),
    (-10, 7),
    (-11, 8),
    (-13, 9),
    (-14, 11),
    (-14, 14),
    (-14, 17),
    (-13, 19),
    (-12, 22),
    (-12, 25),
    (-11, 28),
    (-10, 30),
    (-10, 33),
    (-9, 37),
    (-7, 41),
    (-5, 46),
    (-3, 50),
    (0, 54),
    (3, 57),
    (7, 59),
    (10, 62),
    (12, 64),
    (13, 66),
    (14, 67),
    (16, 67),
    (18, 68),
    (19, 68),
    (20, 67),
    (22, 67),
    (23, 66),
    (25, 64),
    (28, 63),
    (32, 63),
    (37, 64),
    (41, 64),
    (44, 64),
    (48, 64),
    (53, 63),
    (59, 63),
    (64, 63),
    (70, 62),
    (76, 62),
    (83, 62),
    (89, 62),
    (95, 61),
    (102, 60),
    (108, 60),
    (113, 59),
    (118, 59),
    (123, 59),
    (129, 60),
    (135, 60),
    (140, 59),
    (144, 59),
    (148, 59),
    (152, 58),
    (157, 58),
    (161, 57),
    (164, 55),
    (166, 54),
    (169, 53),
    (172, 51),
    (174, 48),
    (176, 45),
    (178, 43),
    (180, 42),
    (181, 42),
    (182, 43),
    (182, 44),
    (182, 45),
    (181, 47),
    (179, 48),
    (177, 50),
    (176, 51),
    (175, 51),
    (175, 52),
    (174, 53),
    (172, 53),
    (171, 54),
    (170, 55),
    (170, 57),
    (171, 59),
    (173, 61),
    (174, 63),
    (176, 64),
    (179, 64),
    (182, 65),
    (184, 66),
    (187, 68),
    (190, 70),
    (194, 72),
    (198, 74),
    (201, 75),
    (205, 77),
    (208, 80),
    (210, 84),
    (211, 88),
    (212, 93),
    (214, 97),
    (216, 102),
    (217, 108),
    (217, 114),
    (217, 120),
    (216, 126),
    (216, 132),
    (217, 139),
    (219, 145),
    (220, 150),
    (221, 155),
    (221, 161),
    (220, 166),
    ]

def positions6 : List (ℤ × ℤ) :=
[
  (1,1),
  (2,2),
 (4, 3),
 (7, 4),
 (10, 4),
 (12, 5),
 (13, 6),
 (15, 8),
 (16, 9),
 (16, 10),
 (15, 12),
 (13, 14),
 (11, 15),
  (10,16),
 (9, 18),
 (8, 20),
 (7, 23),
 (5, 27),
 (4, 31),
  (3,35),
 (1, 38),
 (-1, 42),
  (-2,45),
 (-4, 48),
 (-6, 50),
 (-8, 52),
 (-9, 53),
 (-11, 54),
 (-14, 54),
 (-17, 55),
 (-19, 57),
 (-20, 60),
 (-20, 63),
 (-20, 66),
 (-19, 69),
 (-18, 71),
 (-18, 73),
 (-19, 76),
 (-20, 79),
 (-22, 81),
 (-24, 82),
 (-25, 84),
 (-26, 87),
 (-26, 91),
 (-26, 96),
 (-27, 101),
 (-28, 106),
 (-28, 112),
 (-28, 118),
 (-28, 123),
 (-28, 128),
 (-29, 133),
 (-29, 139),
 (-28, 146),
 (-26, 154),
 (-25, 163),
 (-24, 171),
 (-22, 178),
 (-19, 184),
 (-17, 189),
 (-15, 193),
 (-13, 197),
 (-12, 202),
 (-11, 207),
 (-11, 213),
 (-11, 218),
 (-11, 222),
 (-11, 225),
 (-12, 227),
 (-14, 229),
 (-17, 231),
 (-20, 234),
 (-23, 236),
 (-25, 238),
 (-26, 240),
 (-28, 242),
 (-31, 244),
 (-35, 246),
 (-40, 248),
 (-45, 249),
 (-51, 251),
 (-56, 253),
 (-62, 255),
 (-67, 258),
 (-72, 261),
 (-76, 265),
 (-79, 268),
 (-83, 272),
 (-86, 277),
 (-89, 282),
 (-92, 287),
 (-94, 292),
 (-95, 296),
 (-97, 301),
 (-100, 307),
 (-103, 313),
 (-105, 318),
 (-107, 322),
 (-110, 326),
 (-112, 330),
 (-114, 333),
 (-116, 336),
 (-117, 339),
 (-118, 341),
 (-119, 344),
 (-120, 347),
 (-121, 350),
 (-123, 354),
 (-126, 359),
 (-129, 363),
 (-132, 366),
 (-135, 368),
 (-138, 369),
 (-141, 369),
 (-145, 369),
 (-149, 369),
 (-152, 368),
 (-155, 368),
 (-157, 368),
 (-160, 369),
 (-162, 371),
 (-165, 374),
 (-167, 376),
 (-168, 378),
 (-168, 380)
  ]

#eval positions6.length
#eval positions6.toFinset.card

def diff (xs : List (ℤ × ℤ)) : List (ℤ × ℤ) :=
  List.zipWith (fun x y => (y.1 - x.1, y.2 - x.2)) ((0, 0) :: xs) xs

def toNum : List (ℤ × ℤ) → List ℕ :=
  fun xs => xs.map
    fun
    | (-1, -1) => 1
    | (0, -1) => 2
    | (1, -1) => 3
    | (-1, 0) => 4
    | (0, 0) => 5
    | (1, 0) => 6
    | (-1, 1) => 7
    | (0, 1) => 8
    | (1, 1) => 9
    | _ => 0

#eval toNum <| diff <| diff positions6
#eval Nat.ofDigits 10 <| List.reverse <| toNum <| diff <| diff positions6

#eval [8, 2, 7, 9, 9, 5, 3, 2, 5, 1, 1, 9, 8, 5, 2, 9, 3, 2, 7, 1, 3, 5, 5, 6, 5, 4, 3, 6, 3, 7, 6, 2, 5, 4, 9, 1, 5, 1, 1, 2, 8, 1, 1, 4, 2, 5, 3, 5, 9, 5].length

#eval "82799532511985293271355654363762549151128114253595".length

-- #eval List.zipWith (fun x y => (y.1 - x.1, y.2 - x.2)) positions (List.tail positions)
