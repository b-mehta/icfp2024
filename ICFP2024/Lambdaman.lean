import Batteries
import Mathlib.Data.Finset.Powerset
import Mathlib.Data.Finset.Sort
import Mathlib.Data.Prod.Lex

def lambdaman1 : String :=
"###.#...
...L..##
.#######"

def lambdaman2 : String :=
"L...#.
#.#.#.
##....
...###
.##..#
....##"

def lambdaman3 : String :=
"......
.#....
..#...
...#..
..#L#.
.#...#
......"

def lambdaman4 : String :=
"#####################
#...#.#.........#...#
#.###.#.#####.###.###
#...#.#.....#.......#
###.#.#.###.#########
#.#....L..#.#.......#
#.#####.###.#.###.###
#.#.#...#.......#...#
#.#.#######.#######.#
#.#...#.#...#.#.....#
#.#.###.#.###.###.#.#
#.....#...#.......#.#
#.###.###.###.#####.#
#.#.#...#...#...#...#
###.#.#.#.#####.###.#
#...#.#...#.....#...#
#.###.#.#.#####.#####
#.....#.#.....#.#...#
#.###.#.#.#.#.#.#.###
#.#...#.#.#.#.#.....#
#####################"

def lambdaman5 : String :=
".....########...
....#...........
...#..######....
..#..#......#...
.#..#...##...#..
.#..#..#L.#...#.
.#...#....#...#.
..#...####...#..
...#........#...
....########....
................"

def lambdaman7 : String :=
"############################
#............##............#
#.####.#####.##.#####.####.#
#.####.#####.##.#####.####.#
#.####.#####.##.#####.####.#
#..........................#
#.####.##.########.##.####.#
#.####.##.########.##.####.#
#......##....##....##......#
######.##############.######
######.##############.######
######.##..........##.######
######.##.###..###.##.######
######.##.#......#.##.######
#.........#......#.........#
######.##.#......#.##.######
######.##.########.##.######
######.##..........##.######
######.##.########.##.######
######.##.########.##.######
#............##............#
#.####.#####.##.#####.####.#
#.####.#####.##.#####.####.#
#...##........L.......##...#
###.##.##.########.##.##.###
###.##.##.########.##.##.###
#......##....##....##......#
#.##########.##.##########.#
#.##########.##.##########.#
#..........................#
############################"

def lambdaman8 : String :=
"###################################################################################################
#.................................................................................................#
#.###############################################################################################.#
#.#.............................................................................................#.#
#.#.###########################################################################################.#.#
#.#.#.........................................................................................#.#.#
#.#.#.#######################################################################################.#.#.#
#.#.#.#.....................................................................................#.#.#.#
#.#.#.#.###################################################################################.#.#.#.#
#.#.#.#.#.................................................................................#.#.#.#.#
#.#.#.#.#.###############################################################################.#.#.#.#.#
#.#.#.#.#.#.............................................................................#.#.#.#.#.#
#.#.#.#.#.#.###########################################################################.#.#.#.#.#.#
#.#.#.#.#.#.#.........................................................................#.#.#.#.#.#.#
#.#.#.#.#.#.#.#######################################################################.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.....................................................................#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.###################################################################.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.................................................................#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.###############################################################.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.............................................................#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.###########################################################.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.........................................................#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#######################################################.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.....................................................#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.###################################################.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.................................................#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.###############################################.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.............................................#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###############################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.............................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###############.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.............#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#L#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...........#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#############.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...............#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...........................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#############################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...............................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#...........................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#############################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#...............................................#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#################################################.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#...................................................#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#####################################################.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.......................................................#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#########################################################.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#...........................................................#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#############################################################.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#...............................................................#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#################################################################.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#...................................................................#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#####################################################################.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.......................................................................#.#.#.#.#.#.#.#
#.#.#.#.#.#.#########################################################################.#.#.#.#.#.#.#
#.#.#.#.#.#...........................................................................#.#.#.#.#.#.#
#.#.#.#.#.#############################################################################.#.#.#.#.#.#
#.#.#.#.#...............................................................................#.#.#.#.#.#
#.#.#.#.#################################################################################.#.#.#.#.#
#.#.#.#...................................................................................#.#.#.#.#
#.#.#.#####################################################################################.#.#.#.#
#.#.#.......................................................................................#.#.#.#
#.#.#########################################################################################.#.#.#
#.#...........................................................................................#.#.#
#.#############################################################################################.#.#
#...............................................................................................#.#
#################################################################################################.#
..................................................................................................#
###################################################################################################"

def lambdaman9 : String :=
"L.................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
.................................................."

def lambdaman10 : String :=
"L..........#..........#..........#..........#.....
.....#..........#..........#..........#..........#
..........#..........#..........#..........#......
....#..........#..........#..........#..........#.
.........#..........#..........#..........#.......
...#..........#..........#..........#..........#..
........#..........#..........#..........#........
..#..........#..........#..........#..........#...
.......#..........#..........#..........#.........
.#..........#..........#..........#..........#....
......#..........#..........#..........#..........
#..........#..........#..........#..........#.....
.....#..........#..........#..........#..........#
..........#..........#..........#..........#......
....#..........#..........#..........#..........#.
.........#..........#..........#..........#.......
...#..........#..........#..........#..........#..
........#..........#..........#..........#........
..#..........#..........#..........#..........#...
.......#..........#..........#..........#.........
.#..........#..........#..........#..........#....
......#..........#..........#..........#..........
#..........#..........#..........#..........#.....
.....#..........#..........#..........#..........#
..........#..........#..........#..........#......
....#..........#..........#..........#..........#.
.........#..........#..........#..........#.......
...#..........#..........#..........#..........#..
........#..........#..........#..........#........
..#..........#..........#..........#..........#...
.......#..........#..........#..........#.........
.#..........#..........#..........#..........#....
......#..........#..........#..........#..........
#..........#..........#..........#..........#.....
.....#..........#..........#..........#..........#
..........#..........#..........#..........#......
....#..........#..........#..........#..........#.
.........#..........#..........#..........#.......
...#..........#..........#..........#..........#..
........#..........#..........#..........#........
..#..........#..........#..........#..........#...
.......#..........#..........#..........#.........
.#..........#..........#..........#..........#....
......#..........#..........#..........#..........
#..........#..........#..........#..........#.....
.....#..........#..........#..........#..........#
..........#..........#..........#..........#......
....#..........#..........#..........#..........#.
.........#..........#..........#..........#.......
...#..........#..........#..........#..........#.."

def lambdaman11 : String :=
"#####################################################################################################
#.#.....#.......#.#.......#...#...#.......#...#.......#.#.......#...#.....#.....#.....#.......#.....#
#.###.###.#####.#.###.###.#.###.#.#.#######.#######.###.#.###.###.#####.#.###.#######.#.#.#########.#
#...#.#.....#.....#.....#...#...#.....#.........#.#.......#...#.........#.....#...#.#...#.#.........#
#.###.###.###.#.#########.#.#.###.#.#.#.###.#.###.###.#################.#######.#.#.###.###.#.###.###
#.#.#.....#...#...#.#.#...#.#.#...#.#.#...#.#.#...........#.....#.......#.#.#...#.#.........#...#...#
#.#.###.###.#######.#.#.#######.#####.#.#.###.###.#.#####.#####.#.###.#.#.#.###.#.#.#####.#####.#####
#.......#.#.#.....#.........#.....#...#.#...#...#.#.#...#.#...#.#...#.#.#.....#.#.....#.....#.#.....#
#####.#.#.###.#.###.#.###.#.#.#######.#.#.###.###.#.#.#######.#.###.#####.###.###.#.#.#.###.#.#.###.#
#...#.#.#...#.#...#.#...#.#.......#.#.#.#.#.#...#.#.#.......#.......#.....#...#.#.#.#.#.#.....#.#.#.#
###.###.#.###.#####.#######.#.#####.#.#.###.#######.#####.#.#####.#.#.#.#####.#.#.###########.#.#.###
#...#.........#.........#.#.#.#...#.........#.........#.#.#...#...#...#...#...#.#...#...#.....#.....#
###.#.#.#.###.#####.#.###.###.###.###.#############.###.#####.###.###.###.#.###.###.#.###.#########.#
#.#...#.#.#...#.....#.#.....#.#.#...#.....#...#...#.#.............#...#...#.#.....#.#...#.........#.#
#.###.###.###.###.#####.###.#.#.###.###.###.#####.#.#.###.#############.###.#####.#.#.###.#####.#####
#.....#.....#.........#.#.....#...#.........#.#.#...#...#.......#...#.#.#...#...#.....#.....#.......#
#.#.###.###.#.#.#################.#.#####.###.#.#.#.#.#####.###.###.#.#######.###.#####.#.###.###.###
#.#.#.#.#...#.#...#...#...#...#.......#...#.#...#.#.#.....#.#...#.....#...........#.....#.#.#...#.#.#
#.###.###.#.#######.###.#####.#.###.#.#.###.#.###.#############.###.###.###.###.###########.#.#.###.#
#.#.....#.#.#.....#.#.......#.#...#.#.#.#...#.......#.#.....#.#.#.....#.#.....#.#.......#...#.#.#.#.#
#.###.#######.#####.#.###.###.#.###.#.#####.#.#.#####.###.###.#.#.#######.#####.#.###.###.###.#.#.#.#
#.#...#...#.....#.#...#...#.#.#.#...#.#.#.....#.#...#.....#...#.#.....#...#.......#.........#.#.....#
###.#.###.#.#.###.#.#.#.#.#.#.###.#####.###.#.#####.###.#.#.###.#####.###.#.###.#######.###########.#
#...#.#.#...#...#...#.#.#...#.#.#.#.........#.#...#...#.#.............#...#.#.......#.....#.....#.#.#
###.###.#.###.#####.#######.#.#.#.#######.###.#.#####.#.#.#####.###.#.#.###########.#########.#.#.###
#...#.#...#.#.#.#...#.....#.....#.......#...#.#...#.....#.#...#...#.#.#.#...#.#.#.....#.....#.#.....#
#.###.#.###.#.#.#.#####.###.#####.#.#.#####.###.#####.#####.#######.#######.#.#.#####.#.#.###.#.#.#.#
#.....#.#.#...#.#.....#...#...#.#.#.#.......#...............#.....#...#.....#.........#.#...#.#.#.#.#
#.###.###.###.#.#.#.###.#####.#.#.#######.#.###########.###.#.#########.#.#########.#.#.###########.#
#.#.#...#.#.......#.#...#...#L#.......#.#.#.....#...#...#.#.#.#...#.#...#...#.#.....#.....#.....#.#.#
#.#.###.#.#####.###.###.###.#.#.###.###.###########.#.###.###.###.#.#.#######.###.###.#.#####.###.#.#
#.#...........#.#.....#.#.#...#...#.#...#.......#.#.#...........#.....#.#.......#.#...#.#.....#.#...#
###.###.###.###.###.###.#.#.###.#####.#.#.#.#####.#.#.#########.#.###.#.#.#.#.#####.#########.#.#.###
#...#...#.#...#.#...#.#.#.....#.....#.#.#.#.............#.#.....#.#.#.....#.#.#.........#.#.....#...#
#######.#.#########.#.#.###.#####.###.###.#######.#####.#.#####.###.#.###.###.#.###.#.###.###.#.#.###
#.....#.........#...#.......#...#.#.......#.#...#.#...........#.#.....#.....#.#.#.#.#.....#...#.....#
###.###.###.#.###.#.#.#####.###.#.#####.###.###.#.###.#.#.#.#######.#####.###.###.#.###.#####.#.#####
#.#...#.#...#.#...#.#.#...#...#.......#.....#.......#.#.#.#...#.......#.....#.#...#...#...#.#.#.....#
#.#.#######.###.#########.#.###.#####.###.#.#.#######.#######.#.#.#.#######.#####.#.#.#.#.#.#######.#
#.#.......#.....#.....#.....#...#.......#.#.#...#.....#.#...#...#.#.....#.#.#...#...#.#.#...#.#...#.#
#.#.#.###.#####.#.#######.#####.#############.#########.###.#.#########.#.#####.#.###.#.#####.#.#.#.#
#.#.#.#.#.#.....#.....#.....#.................#...#.....#.........#.........#...#.#...#.........#...#
#.###.#.#.#.#.###.###.###############.###.#####.#.#####.#.#.###.#########.###.#####.###.###.#.#######
#...#.#.....#...#.#...#.#.........#.....#...#.#.#...#...#.#.#...#...#...#.#.#.#.#.#.#.#.#...#...#...#
#.###.###.###.###.###.#.#.###.#.###.#######.#.#.#.#.###.#.#######.#.#.#.###.#.#.#.###.#.#####.#.#.###
#.......#.#...#.#...#...#.#.#.#.........#.....#.#.#...#...#...#.#.#...#.#.......#.#.#.......#.#.#...#
#.###.###.###.#.#.#####.###.#.###.#.#.###.###########.#.#####.#.#.###.###.#####.#.#.#.#####.###.#.#.#
#...#.#.#.#...#...#.....#.#...#...#.#...#.#.........#...#...........#.....#.#...#.........#...#...#.#
#.#.###.###.#######.#####.#.###############.#.#.###.#.###.#########.#######.#.#########.###.#####.###
#.#.#.........#.#.....#.#.#.#.#...#...#.#.#.#.#...#...........#.#...#.#...........#...#...#...#.....#
#####.#########.#.###.#.#.#.#.#.#.###.#.#.#.###############.###.#.###.#####.#.#.#####.#.#######.#.###
#.........#.......#...#.......#.#.#...#.......#.....#.....#.#...#.....#.#...#.#.#...........#...#.#.#
###.###.#######.###.#####.#####.#.#.#.###.#.###.###.#.#####.#.#####.#.#.#.#.#####.#####.#.#.#####.#.#
#.....#.#.#.......#...#.#.....#.#...#...#.#...#.#.#.#.....#.#...#...#...#.#.......#.....#.#...#.....#
###.#.###.#.###.#.#####.#.#########.###########.#.###.#########.#######.#########.#####.###########.#
#...#.......#...#.....#.#.#.#.#.#.......#...#...#...#.....#...#.#.#...#.......#...#...#.#.......#...#
#.#.#########.#.#.#.###.#.#.#.#.#.#.#####.#####.###.###.#####.#.#.###.#.###.###.#.#.#.###.###.###.#.#
#.#...#.#.#...#.#.#.........#.#.#.#.#...#...........#.....#.#.#...#...#...#.#.#.#...#...#.#.#.#...#.#
#.#####.#.###.#.#######.#.#.#.#.#.###.#######.###.###.#.#.#.#.#.#####.#######.#.###########.#.#####.#
#.#.#.#.......#.#.......#.#.#.#...#.......#.....#...#.#.#.#.#...#.#.......#...#.#.....#.#.....#.....#
###.#.#####.###########.###.#.#.#.#######.#.###.#.###.#.###.#.###.###.###.#.#.###.#####.#####.#.#.###
#.....#.#.#...#.....#...#.#.....#.#.....#...#...#.#.#.#.....#.......#...#...#...#.#.......#.....#.#.#
#.#####.#.#.#.#.###.###.#.#.#######.#####.#####.###.#.#######.#######.#.#####.###.#######.#####.###.#
#.#...#.#...#...#...#.....#.....#.#.#.#.......#.....#...#.....#...#...#.#.#.#...#...#.#.....#.......#
#.###.#.#.#.#.#####.#.#.###.#####.#.#.###.#.###.#######.#.#.#####.#####.#.#.#####.###.#.#.###.#.###.#
#.......#.#.#.#.#...#.#.#.......#.#.......#.#.#.......#...#.#.#.#.#...#...............#.#.#...#...#.#
#.#####.#.#####.#.#####.#.#.#####.###.#######.###.#.###.#.###.#.#.###.#####.#####.#######.###.#######
#.#.#.#.........#...#.#.#.#...#.....#.#...#.....#.#...#.#.#...#.#...#...#...#.#...#.......#.......#.#
###.#.#.#####.#######.###.###.#.#####.#.###.###.#.#.###.###.#.#.#.#.###.###.#.#######.###.#.#.###.#.#
#.........#.....#.......#.#...#...........#...#...#...#...#.#.....#.#.........#.#.....#.#...#...#...#
###.#####.#.#.#####.#####.#############.###.###.#####.#.#########.#########.###.#####.#.#.#######.#.#
#...#.....#.#.#...#.#...#.....#...#.#.#...#.#.....#...#.........#...#.#.#...#.#.#.#.#.#...#.#.#.#.#.#
###.###.###.#.###.#.#.###.#.#####.#.#.#########.###.###.###.###.###.#.#.###.#.#.#.#.#######.#.#.#.#.#
#.#.#...#...#.#...#.....#.#.#.....#.....#.#...#.#.#.....#...#...#.......#.....#.#.....#.#.#.......#.#
#.#####.#.#######.#.#.###.#.#.#.#.#####.#.#.#####.#.#########.#######.#####.###.#.#.#.#.#.#.#####.###
#.....#.#.#...#...#.#.....#...#.#...#.#...#...#.#...#...........#.#.....#...#...#.#.#.#.#...#.#...#.#
#.#.#####.#.###.###.#.#.#####.#######.#.###.###.#.#######.#####.#.#.#######.#.#####.#.#.#####.#.###.#
#.#...#.#.#.#.#.#...#.#.#.............#.#.....#.....#.#...#.....#.#.....#.#...#.#.#.#...#.#...#.....#
#.#.#.#.#.#.#.#.#####.###.#####.#######.#####.#.#####.#####.###.#.###.#.#.#.###.#.#####.#.###.#.###.#
#.#.#.#...#...#.#.....#.#...#...#.#.#...#.....#...#.#.#.......#.....#.#...........#.......#.......#.#
#.###.###.###.#.#.#####.#####.#.#.#.###.###.#####.#.#.#.###.#.#######.###.###.#.###.#####.#.###.###.#
#...#.#.#.#.......#.......#.#.#.#...............#...#.#.#...#...#.#...#.....#.#.#.#.#.#...#...#.#...#
#.#.###.#.#######.#.###.#.#.#.###.#########.#.#######.#######.###.#####.#########.###.###.#######.###
#.#.#.#...#...#...#...#.#.#...#.#.#.#...#...#.#.....#.#...#.#.....#.#...#.#.......#.#.#.#.#.....#.#.#
###.#.#######.#.#.#######.#####.#.#.###.#.###.#.#.#.#.#.###.#.#.###.###.#.#####.#.#.#.#.#.#.###.###.#
#.......#.#.#...#...#.#.....#.....#.#.......#.#.#.#.....#.....#.......#.........#.#.........#.....#.#
#####.###.#.#####.###.#.###.###.###.#####.#####.#####.#.###.###.###.#.#.#######.#.#.#.###.#######.#.#
#.....#.#.....#...#...#...#...#.#.........#.....#.....#...#...#.#...#.....#...#.#...#...#.#.#.#.#...#
#####.#.#.#.#.#.#####.#.#.#######.#.###.#.#.###.#.#.#.#.###.#####.#########.#.#####.#####.#.#.#.#.#.#
#...#.#...#.#...#.......#.#.......#.#.#.#.#...#.#.#.#.#.....#...#...........#.#...#.#.........#...#.#
#.#.#.#.#.#.#.#.#.#.###.#########.###.#.#.###.###.#####.#####.#.#.#.#.#.#######.#######.#.###########
#.#.....#.#.#.#...#...#...#...#.......#.#.#.....#.#.#.....#...#.#.#.#.#...#.#.......#...#.#...#.#...#
#####.###.#####.#.#########.###.#.#.#########.#####.###.#.#.#.#.#####.###.#.###.###.#.#.###.#.#.#.###
#...#.#...#...#.#...#.....#.....#.#.......#.......#.#...#...#.#.#.#...#...........#.#.#.#...#.......#
#.#.###.#####.#.#######.###.#######.#.#.#.#####.###.#######.#.###.#####.#.###.#####.#######.#####.#.#
#.#.....#.#.......#.........#.......#.#.#...#.........#.....#...#...#...#.#.#...#.........#...#...#.#
###.###.#.#######.#.###.#######.#.#.#.###.#.#######.###.#.#.###.#.#########.#.#.###.#####.#####.###.#
#...#...#...#...#...#...#.#.....#.#.#...#.#.........#...#.#...#.#...#.........#...#.#.#.#.#.....#.#.#
###.#.###.###.#.###.#####.#######.#.#.###.###.#######.###########.#.#.###.#######.#.#.#.#.###.#.#.###
#...#.........#.#...........#.....#.#.#.....#...#...............#.#...#.....#.....#...#.......#.....#
#####################################################################################################"

structure Grid : Type :=
(width height : ℕ)
(curr : ℕ × ℕ)
(wall : Finset (ℕ × ℕ))
(toVisit : Finset (ℕ × ℕ))

def mkGrid (s : String) : Grid := Id.run do
  let lines := (s.splitOn "\n").reverse
  let height := lines.length
  let width := lines[0]!.length
  let mut curr : ℕ × ℕ := (0, 0)
  let mut wall : Finset (ℕ × ℕ) := Finset.empty
  let mut toVisit : Finset (ℕ × ℕ) := Finset.empty
  for hi : i in [0:height] do
    for j in [0:width] do
      let c := lines[i].get ⟨j⟩
      if c == '#' then wall := insert (j, i) wall
      else if c == 'L' then curr := (j, i)
      else if c == '.' then toVisit := insert (j, i) toVisit
  return ⟨width, height, curr, wall, toVisit⟩

unsafe def showGrid (g : Grid) : String := Id.run do
  let mut board : Array (Array Char) := Array.mkArray g.height (Array.mkArray g.width ' ')
  for i in g.wall.1.unquot do
    board := board.set! i.2 (board[i.2]!.set! i.1 '█')
  for i in g.toVisit.1.unquot do
    board := board.set! i.2 (board[i.2]!.set! i.1 '.')
  board := board.set! g.curr.2 (board[g.curr.2]!.set! g.curr.1 'L')
  let ans : String := String.intercalate "\n" (board.reverse.toList.map (·.foldl (fun x y => (x.push y).push ' ') ""))
  return ans

-- ■ ■ █

inductive Dir | U | R | D | L
deriving Repr

/-- The new location after a move. Does *not* account for walls. -/
def newLocAux : Grid → Dir → ℕ × ℕ
  | ⟨_, _, c, _, _⟩, .D => (c.1, c.2 - 1)
  | ⟨_, h, c, _, _⟩, .R => (min (c.1 + 1) (h - 1), c.2)
  | ⟨w, _, c, _, _⟩, .U => (c.1, min (c.2 + 1) (w - 1))
  | ⟨_, _, c, _, _⟩, .L => (c.1 - 1, c.2)

def newLoc (g : Grid) (d : Dir) : ℕ × ℕ := let i := newLocAux g d; if i ∈ g.wall then g.curr else i

def move (d : Dir) : Grid → Grid
  | g@⟨w, h, _, wall, toVisit⟩ =>
      let c' := newLocAux g d
      if c' ∈ wall
        then g
        else ⟨w, h, c', wall, toVisit.erase c'⟩

def moves (ds : List Dir) (g : Grid) : Grid := List.foldl (flip move) g ds

open Dir

def sol4 : List Dir :=
  ([D,D,L,L,R,R,U,U,R,R,L,L,L,L,L,L,U,U,L,L,U,U,R,R,L,L,D,D,R,R,D,D,R,R,U,U,U,U,D,D,D,D,R,R,U,U,U,U,
  R,R,R,R,R,R,R,R,L,L,D,D,R,R,R,R,U,U,R,R,L,L,D,D,R,R,L,L,L,L,L,L,U,U,L,L,L,L,L,L,D,D,R,R,R,R,D,D,D,
  D,L,L,R,R]
  ++
  [D,D,L,L,D,D,L,L,U,U,D,D,R,R,D,D,R,R,L,L,D,D,D,D,D,D,U,U,R,R,D,D,U,U,R,R,D,D,U,U,L,L,L,L,U,U,L,L,
  D,D,D,D,U,U,U,U,U,U,L,L,D,D,D,D,D,D,L,L,R,R,U,U,L,L,L,L,D,D,U,U,U,U,R,R,U,U,D,D,L,L,D,D,R,R,R,R,U,
  U,U,U,U,U,L,L,U,U,U,U,D,D,R,R,L,L,D,D,L,L,D,D,U,U,U,U,U,U,U,U,D,D,D,D,D,D,R,R,R,R,D,D,R,R,D,D,R,R,
  U,U,U,U,U,U,R,R,U,U,R,R,R,R,L,L,U,U,R,R,R,R,R,R,L,L,D,D,R,R,D,D,D,D,D,D,L,L,R,R,D,D,L,L,R,R,U,U,U,
  U,U,U,L,L,L,L,R,R,D,D,L,L,L,L,U,U,D,D,L,L,R,R,D,D,R,R,D,D,L,L,L,L,R,R,R,R,D,D,D,D,R,R,R,R,L,L,
  U,U,R,R]
  )

def sol4' : List Dir :=
  [R,L,L,U,U,D,D,L,U,L,U,R,L,D,R,D,R,R,D,L,R,U,U,U,R,R,R,R,L,D,R,R,U,R,L,D,R,L,L,L,U,L,L,L,D,R,
    R,D,D,L,R,D,L,D,L,U,D,R,D,R,L,D,D,D,U,R,D,U,R,D,U,L,L,U,L,D,D,U,U,U,L,D,D,D,L,R,U,L,L,D,U,U,R,
    U,D,L,D,R,R,U,U,U,L,L,D,U,U,U,U,D,D,D,R,U,R,L,U,D,D,R,D,R,D,R,U,U,U,R,U,R,R,L,U,R,R,R,L,D,R,D,D,
    D,L,R,D,L,R,U,U,U,L,L,R,D,L,L,U,D,L,R,D,R,D,L,L,R,R,D,D,R,R,L,U,R,L,L]

def Dir.toString : Dir → String
  | U => "U"
  | R => "R"
  | D => "D"
  | L => "L"

def repeating : List α → List α
| [] => []
| x :: xs => x :: x :: repeating xs

def sol5 : List Dir :=
  [R,D,L,L,L,U,L,U,R,U,R,D,U,R,R,R,R,D,L,R,R,D,L,R,R,D,L,L,D,R,L,D,U,L,D,L,L,L,L,L,U,L,D,U,L,U,R,L,
  L,U,R,U,L,R,U,R,U,R,U,R,R,R,R,R,R,R,D,R,U,U,R,R,D,L,D,R,D,L,L,R,D,R,D,D,D,L,D,R,L,L,D,R,R,D,L,L,L,
  U,D,L,L,L,L,L,L,L,L,L,L,L,L,U,R,R,R,L,U,L,L,U,R,L,U,U,U,U,U,U,U,R,D,D,D,U,R,U,U,D,R,U,R]

-- #eval (mkGrid lambdaman7).toVisit.card

def sol7 : List Dir := []

def bfs_queue_paths {α : Type*} [DecidableEq α] [Fintype α] (ns : α → List α) :
    List α → List (α × List α) → List (α × List α) → List (α × List α)
  | _, paths, [] => paths
  | visited, paths, (x, n) :: xs =>
      if h : x ∈ visited
        then bfs_queue_paths ns visited paths xs
        else
          have : (visited.toFinsetᶜ.erase x).card < _ := Finset.card_erase_lt_of_mem (by simpa)
          bfs_queue_paths ns (x :: visited) ((x, n) :: paths) (xs ++ (ns x).map (·, x :: n))
  termination_by v _ l => (v.toFinsetᶜ.card, l.length)

def bfs_paths {α : Type*} [DecidableEq α] [Fintype α] (ns : α → List α) (start : α) :
    List (α × List α) :=
  bfs_queue_paths ns [] [] [(start, [])]

def bfs_paths' {α : Type*} [DecidableEq α] (all : Finset α)
    (ns : α → List α) (start : α) :
    List (α × List α) :=
  if hstart : start ∈ all
    then
      (bfs_paths (α := all)
        (fun x => (ns x).filterMap fun y => if hy : y ∈ all then some ⟨y, hy⟩ else none)
        ⟨start, hstart⟩).map fun i =>
      ⟨i.1, i.2.map Subtype.val⟩
    else []

partial def bfsToAux {α : Type*} [ToString α] [Hashable α] [DecidableEq α] [Fintype α] (ns : α → List α)
    (terminal : α → Bool) :
    Lean.HashSet α → List (α × List α) → List (α × List α) → Option (α × List α)
  | _, _, [] => none
  | visited, paths, (x, n) :: xs =>
      if visited.contains x
        then bfsToAux ns terminal visited paths xs
        else
          if terminal x
            then some (x, n)
            else
              bfsToAux ns terminal
                (visited.insert x)
                ((x, n) :: paths)
                (xs ++ (ns x).map (·, x :: n))

-- def bfsToAux {α : Type*} [ToString α] [Hashable α] [DecidableEq α] [Fintype α] (ns : α → List α)
--     (terminal : α → Bool) :
--     List α → List (α × List α) → List (α × List α) → Option (α × List α)
--   | _, _, [] => none
--   | visited, paths, (x, n) :: xs =>
--       -- dbg_trace "v={visited} p={paths} curr={(x, n)} rest={xs}"
--       if h : x ∈ visited
--         then bfsToAux ns terminal visited paths xs
--         else
--           if terminal x
--             then some (x, n)
--             else
--               have : (visited.toFinsetᶜ.erase x).card < _ := Finset.card_erase_lt_of_mem (by simpa)
--               bfsToAux ns terminal
--                 (x :: visited)
--                 ((x, n) :: paths)
--                 (xs ++ (ns x).map (·, x :: n))
--   termination_by v _ l => (v.toFinsetᶜ.card, l.length)

def bfsTo {α : Type*} [ToString α] [Hashable α] [DecidableEq α] [Fintype α] (ns : α → List α)
    (terminal : α → Bool) (start : α) : Option (α × List α) :=
  bfsToAux ns terminal ∅ [] [(start, [])]

def bfsTo' {α : Type*} [ToString α] [Hashable α] [DecidableEq α] (all : Finset α)
    (ns : α → List α) (terminal : α → Bool) (start : α) :
    Option (α × List α) :=
  if hstart : start ∈ all
    then
      (bfsTo (α := all)
        (fun x => (ns x).filterMap fun y => if hy : y ∈ all then some ⟨y, hy⟩ else none)
        (terminal ·)
        ⟨start, hstart⟩).map fun i =>
      ⟨i.1, i.2.map Subtype.val⟩
    else none

def bfsTo'' {α : Type*} [ToString α] [Hashable α] [DecidableEq α] (all : Finset α)
    (ns : α → List α)
    (hns : ∀ x ∈ all, ∀ y ∈ ns x, y ∈ all)
    (terminal : α → Bool) (start : α) (hstart : start ∈ all):
    Option (α × List α) :=
  (bfsTo (α := all)
    (fun x => List.pmap (fun y hy => ⟨y, hns _ x.2 _ hy⟩) (ns x) (fun _ hi => hi))
    (terminal ·)
    ⟨start, hstart⟩).map fun i =>
  ⟨i.1, i.2.map Subtype.val⟩

def steps (g : Grid) (x : ℕ × ℕ) : List (ℕ × ℕ) :=
  [(x.1 - 1, x.2), (x.1, x.2 + 1), (x.1 + 1, x.2), (x.1, x.2 - 1)].filter fun y =>
    y.1 < g.width ∧ y.2 < g.height ∧ y ∉ g.wall

def shortestPaths (g : Grid) : List ((ℕ × ℕ) × List (ℕ × ℕ)) :=
  bfs_paths'
    (Finset.range g.width ×ˢ Finset.range g.height)
    (steps g)
    g.curr

def stepsWith (g : Grid) (x : (ℕ × ℕ) × Finset (ℕ × ℕ)) : List ((ℕ × ℕ) × Finset (ℕ × ℕ)) := do
  let i ← steps g x.1
  return (i, x.2.erase i)

unsafe instance : ToString (Finset (ℕ × ℕ)) := ⟨fun s => s!"{repr s}"⟩
unsafe instance : Hashable (Finset (ℕ × ℕ)) where hash s := hash (s.1.unquot : List (ℕ × ℕ))

-- unsafe def runOn (g : Grid) :
--     Option (List (ℕ × ℕ)) :=
--   (bfsTo''
--     ((Finset.range g.width ×ˢ Finset.range g.height) ×ˢ g.toVisit.powerset)
--     (stepsWith g)
--     sorry
--     (fun x => x.2.card = 0)
--     (g.curr, g.toVisit)
--     sorry).map fun i => ((i.1 :: i.2).map (·.1)).reverse
--     -- (Finset.range g.width ×ˢ Finset.range g.height)
--     -- (steps · g)
--     -- g.curr

-- #eval IO.println <| showGrid <| mkGrid lambdaman8 |> moves []

-- #eval (mkGrid lambdaman8).width
#eval ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .".count '.'
-- #eval "█ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █".length
#eval 194 / 2
  -- (List.take 50 [L,L,L,L,L,L,L,R,R,D,D,D,R,R,R,D,D,D,L,L,L,L,L,L,L,L,L,L,L,U,U,U,R,R,U,U,U,L,L,U,U,U,R,R,
  -- R,R,R,D,D,D,D,D,D,L,L,R,R,U,U,U,U,U,U,R,R,R,R,R,R,D,D,D])
-- #eval runOn (mkGrid lambdaman3)

-- unsafe def main : IO Unit :=
--   IO.println <| runOn (mkGrid lambdaman3)

-- █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
-- █ . . . . . 31. . . . . . █ █ . . . . . . 32. . . . . █
-- █ . █ █ █ █ . █ █ █ █ █ . █ █ . █ █ █ █ █ . █ █ █ █ . █
-- █ . █ █ █ █ . █ █ █ █ █ . █ █ . █ █ █ █ █ . █ █ █ █ . █
-- █ . █ █ █ █ . █ █ █ █ █ . █ █ . █ █ █ █ █ . █ █ █ █ . █
-- █ 23. . . . 24. . 25. . 26. . 27. . 28. . 29. . . . 30█
-- █ . █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ . █
-- █ . █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ . █
-- █ . . . . . 21█ █ . . . 35█ █ 36. . . █ █ 22. . . . . █
-- █ █ █ █ █ █ . █ █ █ █ █ █ █ █ █ █ █ █ █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ █ █ █ █ █ █ █ █ █ █ █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . . . . . . . . . . █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . █ █ █ . . █ █ █ . █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . █ . . . . . . █ . █ █ . █ █ █ █ █ █
-- █ 33. . . . 15. . 16█ . . . . . . █ 17. . 18. . . . 34█
-- █ █ █ █ █ █ . █ █ . █ . . . . . . █ . █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ 19. . . . . . . . 20█ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ █ █
-- █ █ █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ █ █
-- █ . . . . . 6 . . 2 . . . █ █ . . . 14. . 13. . . . . █
-- █ . █ █ █ █ . █ █ █ █ █ . █ █ . █ █ █ █ █ . █ █ █ █ . █
-- █ . █ █ █ █ . █ █ █ █ █ . █ █ . █ █ █ █ █ . █ █ █ █ . █
-- █ . . . █ █ 5 . . 3 . . 1 . 0 8 . . 9 . . 11█ █ . . . █
-- █ █ █ . █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ . █ █ █
-- █ █ █ . █ █ . █ █ . █ █ █ █ █ █ █ █ . █ █ . █ █ . █ █ █
-- █ . . 7 . . . █ █ . . . . █ █ . . . . █ █ . . . 12. . █
-- █ . █ █ █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ █ █ . █
-- █ . █ █ █ █ █ █ █ █ █ █ . █ █ . █ █ █ █ █ █ █ █ █ █ . █
-- █ . . . . . . . . . . . 4 . . 10. . . . . . . . . . . █
-- █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █

-- #eval (mkGrid lambdaman7).toVisit.card
-- #eval (mkGrid lambdaman7).width
-- #eval (mkGrid lambdaman7).height
